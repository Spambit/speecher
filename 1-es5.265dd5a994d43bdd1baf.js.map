{"version":3,"sources":["webpack:///src/app/services/login.service.ts","webpack:///src/app/components/speecher-nav/speecher-nav.component.html","webpack:///src/app/components/speecher-nav/speecher-nav.component.ts","webpack:///src/app/utils/object.util.ts","webpack:///src/app/utils/index.ts","webpack:///src/app/services/drive.service.ts","webpack:///src/app/conf/conf.drive.keys.ts"],"names":["LoginService","login$","this","loadGoogleApi","scope","apiKey","clientId","discoveryDocs","gapi","client","init","then","googleAuth","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","e","Promise","reject","isLoggedIn","console","log","next","alreadyGoogleApiLoaded","googleApiDidLoad","script","document","createElement","addEventListener","setAttribute","body","appendChild","Array","prototype","slice","call","getElementsByTagName","some","item","src","forScope","currentUser","get","hasGrantedScopes","user","getBasicProfile","avatar","getImageUrl","name","getName","email","getEmail","shortName","getFamilyName","load","msg","error","key","initClient","_","builder","SigninOptionsBuilder","setPrompt","setScope","signIn","throwDeferedError","signOut","config","SpeecherNavComponent","header","button","simple","show","dropdown","createInstanceOfClass","c","attrValues","obj","Object","keys","defer","fn","window","setTimeout","DriveService","loginService","loginOptions","resolve","loadGoogleDrive","findFile","found","IDs","length","createFolderInternal","id","folderId","callback","retrievePageOfChildren","request","result","execute","resp","concat","files","nextPageToken","drive","list","q","pageToken","fields","spaces","fileId","alt","content","defaultFolderName","folder","allFilesInFolder","query","res","map","file","fileIds","loadApi","login","pipe","first","subscribe","loggedIn","fileMetadata","mimeType","folderColorRgb","create","resource","response","status","logout","withContent","createFileWithJSONContent","data","JSON","stringify","update","val","parentFolderId","delimiter","metadata","parents","multipartRequestBody","path","method","params","uploadType","headers"],"mappings":"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","file":"x","sourcesContent":["import * as Utils from '../utils';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\ndeclare var gapi: any;\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  readonly login$: Subject<boolean> = new Subject();\n  private googleAuth: any;\n  constructor() {\n    this.loadGoogleApi();\n  }\n\n  private initClient({\n    scope = '',\n    apiKey = '',\n    clientId = '',\n    discoveryDocs = ([] = ['']),\n  }): Promise<any> {\n    if (!gapi) {\n      return Promise.reject('Google Api not available.');\n    }\n\n    return gapi.client\n      .init({\n        apiKey,\n        clientId,\n        scope,\n        discoveryDocs,\n      })\n      .then(\n        () => {\n          this.googleAuth = gapi.auth2.getAuthInstance();\n          // Listen for sign-in state changes.\n          this.googleAuth.isSignedIn.listen((isSignedIn) =>\n            this.updateSigninStatus(isSignedIn)\n          );\n        },\n        (e) => Promise.reject(e)\n      );\n  }\n\n  private updateSigninStatus(isLoggedIn: boolean) {\n    console.log(`Logged in : ${isLoggedIn}`);\n    this.login$.next(isLoggedIn);\n  }\n\n  private loadGoogleApi() {\n    if (this.alreadyGoogleApiLoaded()){\n      this.googleApiDidLoad();\n      return;\n    }\n    const gapiUrl = 'https://apis.google.com/js/api.js';\n    const script = document.createElement('script');\n    script.addEventListener('load', () => this.googleApiDidLoad());\n    script.setAttribute('src', gapiUrl);\n    document.body.appendChild(script);\n  }\n\n  private alreadyGoogleApiLoaded() {\n    const scripts = Array.prototype.slice.call(document.getElementsByTagName('script')) as HTMLScriptElement[];\n    return scripts.some(item => item.src === 'https://apis.google.com/js/api.js');\n  }\n\n  isLoggedIn({ forScope = '' }): boolean {\n    if (!this.googleAuth) {\n      return false;\n    }\n    const user = this.googleAuth.currentUser.get();\n    return user.hasGrantedScopes(forScope);\n  }\n\n  getUserInfo(): { avatar: string, name: string, email: string, shortName: string } {\n    if (!this.googleAuth || !this.googleAuth.currentUser) {\n      return;\n    }\n    const user = this.googleAuth.currentUser.get().getBasicProfile();\n    return {\n      avatar: user.getImageUrl(),\n      name: user.getName(),\n      email: user.getEmail(),\n      shortName: user.getFamilyName()\n    };\n  }\n\n  private googleApiDidLoad() {\n    gapi.load('client:auth2', () => {\n      console.log('Google auth loaded.');\n    });\n  }\n\n  private throwDeferedError(msg: string): void {\n    Utils.defer(() => {\n      this.login$.error(msg);\n    });\n  }\n\n  public login({\n    scope = '',\n    key = '',\n    clientId = '',\n    discoveryDocs = ([] = ['']),\n  }): Observable<boolean> {\n    // setTimeout(() => { this.login$.next(true); }, 1000);\n    // return;\n\n    this.initClient({ scope, apiKey: key, clientId, discoveryDocs })\n      .then((_) => {\n        if (this.googleAuth.isSignedIn.get()) {\n          this.login$.next(true);\n        } else {\n          const builder = new gapi.auth2.SigninOptionsBuilder();\n          builder.setPrompt('select_account');\n          builder.setScope('profile').setScope('email');\n          this.googleAuth.signIn(builder).catch((e) => {\n            this.throwDeferedError(e);\n          });\n        }\n      })\n      .catch((e) => {\n        this.login$.error(e);\n      });\n    return this.login$;\n  }\n  public logout(): Observable<boolean> {\n    // setTimeout(() => { this.login$.next(false); }, 1000);\n    // return;\n\n    if (!this.googleAuth) {\n      this.throwDeferedError('Google Auth was not loaded.');\n    } else if (!this.googleAuth.isSignedIn.get()) {\n      Utils.defer(() => this.login$.next(false));\n    } else {\n      this.googleAuth.signOut().catch((e) => {\n        this.throwDeferedError('logout failed');\n      });\n    }\n    return this.login$;\n  }\n}\n","<div class='speecher-nav'>\n  <small>{{config.header}}</small>\n  <ng-template [ngIf]=\"config.button.dropdown\" [ngIfElse]=\"simple\">\n    <div ngbDropdown container=\"body\">\n      <button type=\"button\" ngbDropdownToggle class=\"btn bg-transparent\" data-toggle=\"dropdown\">\n        {{config.button.dropdownTitle}}\n      </button>\n      <div ngbDropdownMenu>\n        <ul class=\"list-group list-group-flush\">\n          <li *ngFor=\"let dropdownItem of config.button.dropdownItems\" ngbDropdownItem\n            class=\"list-group-item list-group-item-action text-center\"\n            (click)=\"dropdownItem.click($event, dropdownItem)\">{{dropdownItem.text}}\n          </li>\n        </ul>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template #simple>\n    <button *ngIf='config.button.simple.show' type=\"button\" class=\"btn bg-transparent\"\n      (click)='config.button.simple.click($event)'>\n      <fa-icon [style.color]=\"config.button.simple.iconColor\" [icon]=\"config.button.simple.icon\"></fa-icon>\n    </button>\n  </ng-template>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\n@Component({\n  selector: 'speecher-nav',\n  templateUrl: 'speecher-nav.component.html',\n  styleUrls: ['speecher-nav.component.scss'],\n})\nexport class SpeecherNavComponent implements OnInit {\n  constructor() {}\n  @Input() config?: NavConfig = {\n    header: '',\n    button: { simple: { show: false }, dropdown: false },\n  };\n  ngOnInit() {}\n}\n\nexport interface NavConfig {\n  button?: {\n    simple?: {\n      iconColor?: string;\n      show: boolean;\n      icon?: IconDefinition;\n      click?: (e: Event) => void;\n    };\n    dropdownTitle?: string;\n    dropdown?: boolean;\n    dropdownItems?: NavDropDownItem[];\n  };\n  header?: string;\n}\n\nexport interface NavDropDownItem {\n  click?: (e: Event, item: NavDropDownItem) => void;\n  text?: string;\n}\n","export function createInstanceOfClass<T>(c: new () => T, attrValues: any): T {\n  const obj = new c();\n  const keys = Object.keys(attrValues);\n  for (const key of keys) {\n    obj[key] = attrValues[key];\n  }\n  return obj;\n}\n\nexport function clone<T>(obj: T): T {\n  const cloneObj = new (this.constructor() as any)();\n  for (const attr in obj) {\n    if (typeof obj[attr] === 'object') {\n      cloneObj[attr] = clone(obj[attr]);\n    } else {\n      cloneObj[attr] = obj[attr];\n    }\n  }\n  return cloneObj;\n}\n\nexport function setProperty<T, K extends keyof T>(obj: T, key: K, val: any) {\n  return (obj[key] = val);\n}\n\nexport function getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n\nexport function create<T>(c: new () => T): T {\n  return new c();\n}\n","export * from './object.util';\n\nexport type anyfn = (...args: any[]) => any;\nexport const defer = (fn: anyfn) => {\n  window.setTimeout(fn, 0);\n};\n","import { Injectable } from '@angular/core';\nimport { LoginService } from './login.service';\nimport { first } from 'rxjs/operators';\nimport { environment } from '../environments/env';\nimport { Observable } from 'rxjs';\nimport { rejects, strict } from 'assert';\n\ndeclare var gapi: any;\n\n@Injectable({ providedIn: 'root' })\nexport class DriveService {\n  static readonly defaultFolderName = 'Speecher-Data-Folder';\n  private loginOptions = {\n    key: environment.drive_api_key,\n    clientId: environment.drive_client_id,\n    scope: 'https://www.googleapis.com/auth/drive.appdata',\n    discoveryDocs: [\n      'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest',\n    ],\n  };\n  constructor(private loginService: LoginService) {}\n  createBaseFolder(name?: string): Promise<{ id?: string }> {\n    return new Promise((resolve, reject) => {\n      this.loadGoogleDrive()\n        .then(() => {\n          return this.findFile({ name });\n        })\n        .then((found) => {\n          if (found.IDs.length === 0) {\n            return this.createFolderInternal({ name }).then(resolve);\n          }\n          return resolve({ id: found.IDs[0] });\n        })\n        .catch(reject);\n    });\n  }\n\n  isLoggedIn() {\n    return this.loginService.isLoggedIn({ forScope: this.loginOptions.scope });\n  }\n  /**\n   * Retrieve a list of files belonging to a folder.\n   *\n   * @param folderId ID of the folder to retrieve files from.\n   * @param callback Function to call when the request is complete.\n   *\n   */\n  private allFilesInFolder(\n    folderId: string,\n    callback: (files: { id: string, mimeType: string, name: string }[]) => void\n  ) {\n    const retrievePageOfChildren = (request, result: { id: string, mimeType: string, name: string }[]) => {\n      request.execute((resp) => {\n        result = result.concat(resp.files);\n        const nextPageToken = resp.nextPageToken;\n        if (nextPageToken) {\n          request = gapi.client.drive.files.list({\n            q: \t`${folderId} in parents and trashed = false`,\n            pageToken: nextPageToken,\n            fields: '*'\n          });\n          retrievePageOfChildren(request, result);\n        } else {\n          callback(result);\n        }\n      });\n    };\n    const initialRequest = gapi.client.drive.files.list({\n      q: `'${folderId}' in parents and trashed = false`,\n      fields: 'nextPageToken, files(id, name)',\n      spaces: 'drive',\n    });\n    retrievePageOfChildren(initialRequest, []);\n  }\n\n  fileContent(fileId: string): Promise<{content: string}> {\n    return new Promise((resolve, reject) => {\n      const request = (gapi.client as any).drive.files.get({\n        fileId,\n        alt: 'media',\n      });\n      request.execute((content: any) => {\n          if (content.error) {\n            reject();\n          }\n          resolve({ content });\n      });\n    });\n  }\n\n  allFilesInBaseFolder(): Promise<{ id: string }[]> {\n    return new Promise((resolve, reject) => {\n      this.findFile({name: DriveService.defaultFolderName}).then((folder) => {\n        if (folder.IDs.length !== 0) {\n          return folder.IDs[0];\n        }\n        return '';\n       }).then(id => {\n         if (id === ''){\n           return [];\n         }\n         return this.allFilesInFolder(id, resolve);\n       }).catch(reject);\n    });\n  }\n\n  findFile({\n    id,\n    name,\n  }: {\n    id?: string;\n    name?: string;\n  }): Promise<{ IDs?: string[] }> {\n    let query = '';\n    if (name) {\n      query = `name = '${name}' and trashed = false`;\n    } else if (id) {\n      query = `'${id}' in parents and trashed = false`;\n    }\n\n    return new Promise<{ IDs?: string[] }>((resolve, reject) => {\n      this.loadGoogleDrive()\n        .then(() => {\n          return gapi.client.drive.files.list({\n            // tslint:disable-next-line: quotemark\n            q: query,\n            fields: 'nextPageToken, files(id, name)',\n            spaces: 'drive',\n          });\n        })\n        .then((res) => {\n          const files = res.result && res.result.files ? res.result.files : [];\n          const fileIds: string[] = files.map((file) => file.id);\n          return fileIds;\n        })\n        .then((fileIds) => {\n          resolve({ IDs: fileIds });\n        })\n        .catch(() => {\n          return [];\n        });\n    });\n  }\n\n  login(): Promise<void> {\n    return this.loadGoogleDrive();\n  }\n\n  private loadGoogleDrive(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (\n        !this.loginService.isLoggedIn({ forScope: this.loginOptions.scope })\n      ) {\n        this.loginService\n          .login(this.loginOptions)\n          .pipe(first())\n          .subscribe((loggedIn) => {\n            if (loggedIn) {\n              this.loadApi().then(resolve).catch(reject);\n            } else {\n              reject();\n            }\n          });\n        return;\n      }\n      this.loadApi().then(resolve).catch(reject);\n    });\n  }\n\n  private loadApi(): Promise<void> {\n    if (gapi && gapi.client.drive) {\n      return Promise.resolve();\n    }\n    return gapi.client.load('drive', 'v3');\n  }\n\n  private createFolderInternal({\n    name = DriveService.defaultFolderName,\n  }): Promise<{ id?: string }> {\n    const fileMetadata = {\n      name,\n      mimeType: 'application/vnd.google-apps.folder',\n      folderColorRgb: '#007bff',\n    };\n    console.log('Logged in and trying to create folder in drive.');\n    return new Promise((resolve, reject) => {\n      const options = {\n        resource: fileMetadata,\n        fields: 'id',\n      };\n      gapi.client.drive.files.create(options).then((response) => {\n        switch (response.status) {\n          case 200:\n            const file = response.result;\n            console.log('Created file or folder Id: ', file.id);\n            resolve({ id: file.id });\n            break;\n          default:\n            console.log('Error creating the file or folder, ' + response);\n            reject(response);\n            break;\n        }\n      });\n    });\n  }\n\n  logout(): Observable<boolean> {\n    return this.loginService.logout();\n  }\n\n  createFile({\n    name,\n    withContent,\n    folderId,\n  }: {\n    name: string;\n    withContent: any;\n    folderId?: string;\n  }): Promise<{ id: string }> {\n    return new Promise((resolve, reject) => {\n      this.findFile({ name }).then((found) => {\n        if (found.IDs.length !== 0) {\n          return this.createFileWithJSONContent({\n            name,\n            data: JSON.stringify(withContent),\n            fileId: found.IDs[0],\n            update: true,\n          })\n            .then((val) => resolve(val))\n            .catch(() => {\n              console.log('Error: error updating file.');\n              reject();\n            });\n        }\n        return this.createFileWithJSONContent({\n          name,\n          data: JSON.stringify(withContent),\n          parentFolderId: folderId,\n          update: false,\n        })\n          .then((val) => resolve(val))\n          .catch(() => {\n            console.log('Error: error creating file.');\n            reject();\n          });\n      });\n    });\n  }\n\n  private createFileWithJSONContent({\n    name,\n    data,\n    parentFolderId,\n    update,\n    fileId,\n  }: {\n    update: boolean;\n    name: string;\n    data: string;\n    parentFolderId?: string;\n    fileId?: string;\n  }): Promise<{ id: string }> {\n    return new Promise((resolve, reject) => {\n      const boundary = '-------speecher-boundary';\n      const delimiter = '\\r\\n--' + boundary + '\\r\\n';\n      const closeDelim = '\\r\\n--' + boundary + '--';\n\n      const contentType = 'application/json';\n\n      const metadata: any = {\n        name,\n        mimeType: contentType,\n      };\n      if (parentFolderId) {\n        metadata.parents = [parentFolderId];\n      }\n      if (fileId) {\n        console.log(`Updating file in folder id: ${fileId}`);\n      } else {\n        console.log(`Creating file in folder id: ${parentFolderId}`);\n      }\n\n      const multipartRequestBody =\n        delimiter +\n        'Content-Type: application/json\\r\\n\\r\\n' +\n        JSON.stringify(metadata) +\n        delimiter +\n        'Content-Type: ' +\n        contentType +\n        '\\r\\n\\r\\n' +\n        data +\n        closeDelim;\n\n      const urlPath = fileId\n        ? `/upload/drive/v3/files/${fileId}`\n        : `/upload/drive/v3/files`;\n      const request = gapi.client.request({\n        path: urlPath,\n        method: !update ? 'POST' : 'PATCH',\n        params: { uploadType: 'multipart' },\n        headers: {\n          'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\n        },\n        body: multipartRequestBody,\n      });\n      request.execute((file) => {\n        if (!file) {\n          return reject();\n        }\n        return resolve({ id: file.id });\n      });\n    });\n  }\n}\n","export const drive = {\n  key: 'AIzaSyDoqtuscz4Pp_xuR9nYO10O-PsouptHmuA',\n  clientId: '814240394039-953g9k1ovucedj8u0aghsj5ofsii5jut.apps.googleusercontent.com'\n};\n"]}