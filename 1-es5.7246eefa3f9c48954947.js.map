{"version":3,"sources":["webpack:///src/app/services/toast.service.ts","webpack:///src/app/components/speecher-nav/speecher-nav.component.html","webpack:///src/app/components/speecher-nav/speecher-nav.component.ts"],"names":["ToastService","toasts","textOrTpl","options","this","push","show","successTpl","duration","classname","header","delay","dangerTpl","toast","filter","t","pop","config","SpeecherNavComponent","button","simple","dropdown"],"mappings":"qhBAGO,iBAAMA,EAAN,WADP,qCAEE,KAAAC,OAAgB,GADX,kDAGAC,GAAiE,IAA3BC,EAA2B,uDAAH,GACjEC,KAAKH,OAAOI,KAAK,OAAD,QAAGH,aAAcC,MAJ9B,qCAOHC,KAAKE,KAAK,2BAPP,oCAUsE,IAA/DC,EAA+D,uDAAvB,GAAIC,EAAmB,2DACzEJ,KAAKE,KAAKC,EAAY,CACpBE,UAAW,wBACXC,OAAQ,UACRC,MAAOH,MAdN,mCAkBiD,IAA3CI,EAA2C,uDAAvB,GAAIJ,EAAmB,2DACpDJ,KAAKE,KAAKM,EAAW,CAAEH,UAAW,uBAAwBE,MAAOH,MAnB9D,6BAsBEK,GACLT,KAAKH,OAASG,KAAKH,OAAOa,QAAOC,YAACA,OAAIA,IAAMF,OAvBzC,mCA0BHT,KAAKH,OAAOe,UA1BT,K,6CAAMhB,I,yBAAAA,EAAY,QAAZA,EAAY,qBADC,S,EACnB,I,6JCMG,eAEE,2DAAS,gBAA0C,QACrD,O,0BADqD,6B,yBAR3D,gBACE,mBACE,QACF,OACA,gBACE,eACE,qBAIF,OACF,OACF,Q,kBAVI,oDAIM,uD,qCASV,oBACE,iDAASiB,OAAA,0BACT,qBACF,O,sBADW,uDAA+C,0C,wBAF1D,yB,kBAAQ,0CCVL,qBAAMC,EAAN,WACL,aAAa,wBACJ,KAAAD,OAAqB,CAC5BP,OAAQ,GACRS,OAAQ,CAAEC,OAAQ,CAAEd,MAAKA,GAAUe,UAASA,IAJzC,kE,6CAAMH,I,uBAAAA,EAAoB,ssB,GAAA,MDRjC,gBACE,gBAAO,QAAiB,OACxB,8BAeA,wCAMF,Q,mBAtBS,8BACM,8CAA+B,gB,solOCMvC","file":"x","sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ToastService {\n  toasts: any[] = [];\n\n  show(textOrTpl: string | TemplateRef<any>, options: ToastOption  = {}) {\n    this.toasts.push({ textOrTpl, ...options });\n  }\n  showStandard() {\n    this.show('I am a standard toast');\n  }\n\n  showSuccess(successTpl: string | TemplateRef<any> = '', duration: number = 3000) {\n    this.show(successTpl, {\n      classname: 'bg-success text-light',\n      header: 'Success',\n      delay: duration\n    });\n  }\n\n  showDanger(dangerTpl: string = '', duration: number = 3000) {\n    this.show(dangerTpl, { classname: 'bg-danger text-light', delay: duration});\n  }\n\n  remove(toast) {\n    this.toasts = this.toasts.filter(t => t !== toast);\n  }\n  removeLast(){\n    this.toasts.pop();\n  }\n}\n\nexport interface ToastOption {\n  context?: any;\n  classname?: string;\n  delay?: number;\n  header?: string;\n}\n","<div class='speecher-nav'>\n  <small>{{config.header}}</small>\n  <ng-template [ngIf]=\"config.button.dropdown\" [ngIfElse]=\"simple\">\n    <div ngbDropdown container=\"body\">\n      <button type=\"button\" ngbDropdownToggle class=\"btn bg-transparent\" data-toggle=\"dropdown\">\n        {{config.button.dropdownTitle}}\n      </button>\n      <div ngbDropdownMenu>\n        <ul class=\"list-group list-group-flush\">\n          <li *ngFor=\"let dropdownItem of config.button.dropdownItems\" ngbDropdownItem\n            class=\"list-group-item list-group-item-action text-darkgray text-center\"\n            (click)=\"dropdownItem.click($event, dropdownItem)\">{{dropdownItem.text}}\n          </li>\n        </ul>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template #simple>\n    <button *ngIf='config.button.simple.show' type=\"button\" class=\"btn bg-transparent\"\n      (click)='config.button.simple.click($event)'>\n      <fa-icon [style.color]=\"config.button.simple.iconColor\" [icon]=\"config.button.simple.icon\"></fa-icon>\n    </button>\n  </ng-template>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\n\n@Component({\n  selector: 'speecher-nav',\n  templateUrl: 'speecher-nav.component.html',\n  styleUrls: ['speecher-nav.component.scss'],\n})\nexport class SpeecherNavComponent implements OnInit {\n  constructor() {}\n  @Input() config?: NavConfig = {\n    header: '',\n    button: { simple: { show: false }, dropdown: false },\n  };\n  ngOnInit() {}\n}\n\nexport interface NavConfig {\n  button?: {\n    simple?: {\n      iconColor?: string;\n      show: boolean;\n      icon?: IconDefinition;\n      click?: (e: Event) => void;\n    };\n    dropdownTitle?: string;\n    dropdown?: boolean;\n    dropdownItems?: NavDropDownItem[];\n  };\n  header?: string;\n}\n\nexport interface NavDropDownItem {\n  click?: (e: Event, item: NavDropDownItem) => void;\n  text?: string;\n}\n"]}