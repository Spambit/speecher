{"version":3,"sources":["webpack:///src/app/services/toast.service.ts","webpack:///src/app/components/speecher-toast/speecher-toast.component.ts","webpack:///src/app/services/note.service.ts","webpack:///src/app/components/accordian/accordian.component.ts","webpack:///src/app/components/accordian/accordian.component.html","webpack:///src/app/services/template.service.ts"],"names":["ToastService","toasts","textOrTpl","options","this","push","show","successTpl","duration","classname","header","delay","dangerTpl","toast","filter","t","pop","toastService","ToastContainerComponent","applyngbToastClass","NoteService","driveService","dateService","note","Promise","resolve","reject","findFolder","name","defaultFolderName","then","found","IDs","length","console","log","createBaseFolder","ret","id","saveNoteInternal","parentFolderId","catch","findFile","createFile","withContent","JSON","stringify","folderId","AccordianComponent","index","item","TemplateService","resolver","viewContainer","component","factory","resolveComponentFactory","ref","createComponent","instance","getTemplateRef","subscribe","template","destroy","error","TemplateWrapperBase","asObservable","content","next","complete"],"mappings":"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","file":"x","sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ToastService {\n  toasts: any[] = [];\n\n  show(textOrTpl: string | TemplateRef<any>, options: ToastOption  = {}) {\n    this.toasts.push({ textOrTpl, ...options });\n  }\n  showStandard() {\n    this.show('I am a standard toast');\n  }\n\n  showSuccess(successTpl: string | TemplateRef<any> = '', duration: number = 3000) {\n    this.show(successTpl, {\n      classname: 'bg-success text-light',\n      header: 'Success',\n      delay: duration\n    });\n  }\n\n  showDanger(dangerTpl: string = '', duration: number = 3000) {\n    this.show(dangerTpl, { classname: 'bg-danger text-light', delay: duration});\n  }\n\n  remove(toast) {\n    this.toasts = this.toasts.filter(t => t !== toast);\n  }\n  removeLast(){\n    this.toasts.pop();\n  }\n}\n\nexport interface ToastOption {\n  context?: any;\n  classname?: string;\n  delay?: number;\n  header?: string;\n}\n","import {Component, TemplateRef, HostBinding, ViewEncapsulation} from '@angular/core';\nimport {ToastService} from '@services/toast.service';\n\n\n@Component({\n  selector: 'speecher-toasts',\n  styleUrls: ['./speecher-toast.component.scss'],\n  template: `\n    <ngb-toast\n      *ngFor=\"let toast of toastService.toasts\"\n      [class]=\"toast.classname\"\n      [autohide]=\"true\"\n      [delay]=\"toast.delay || 6000000\"\n      (hide)=\"toastService.remove(toast)\"\n      [header]=\"toast.header\"\n    >\n      <ng-template [ngIf]=\"isTemplate(toast)\" [ngIfElse]=\"text\">\n        <ng-template [ngTemplateOutlet]=\"toast.textOrTpl\" [ngTemplateOutletContext]=\"toast.context\"></ng-template>\n      </ng-template>\n\n      <ng-template #text>{{ toast.textOrTpl }}</ng-template>\n    </ngb-toast>\n  `,\n})\nexport class ToastContainerComponent {\n  constructor(public toastService: ToastService) {}\n  @HostBinding('class.ngb-toasts') applyngbToastClass = true;\n  isTemplate(toast): boolean {\n    return toast.textOrTpl instanceof TemplateRef;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DriveService } from './drive.service';\nimport { DateService } from './date.service';\nimport { Note } from './filter.result';\n\n@Injectable({providedIn: 'root'})\nexport class NoteService {\n  constructor(private driveService: DriveService, private dateService: DateService) { }\n  public saveNoteInGoogleDrive(note: Note): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.findFolder({ name: DriveService.defaultFolderName }).then((found) => {\n        if (found.IDs.length === 0) {\n          console.log('Not found base folder');\n          return this.driveService\n            .createBaseFolder()\n            .then((ret) => {\n              console.log(`Base folder created with id: ${ret.id}`);\n              this.saveNoteInternal({note, parentFolderId: ret.id })\n                .then(() => resolve())\n                .catch(reject);\n            })\n            .catch(reject);\n        }\n        console.log(`Found base folder : ${found.IDs[0]}`);\n        return this.saveNoteInternal({ parentFolderId : found.IDs[0], note })\n          .then(() => resolve())\n          .catch(reject);\n      });\n    });\n  }\n\n  private findFolder({ name = '' }): Promise<{IDs?: string[]}> {\n    return this.driveService.findFile({ name });\n  }\n\n  private saveNoteInternal({ note, parentFolderId}: { note: Note; parentFolderId: string}): Promise<{id: string}> {\n    return this.driveService\n      .createFile({\n        withContent: JSON.stringify(note),\n        name: note.name,\n        folderId: parentFolderId,\n      });\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { TemplateWrapperBase } from '@services/template.service';\nimport { IWord } from '@services/filter.result';\n\n@Component({\n    selector: 'speecher-toast-accordian',\n    templateUrl: 'accordian.component.html',\n    styleUrls: ['accordian.component.scss'],\n})\nexport class AccordianComponent extends TemplateWrapperBase {\n  identify(index: number, item: string) {\n    return index;\n  }\n}\n","<ng-template let-word=\"word\">\n  <ngb-accordion activeIds=\"examples, meaning\">\n    <ngb-panel id='meaning'>\n      <ng-template ngbPanelHeader>\n        <div class=\"d-flex justify-content-between\">\n          <textarea spellcheck='false' class=\"border-0 form-control bg-dark\" rows=\"1\" name=\"name\"\n            [(ngModel)]=\"word.name\" (ngModelChange)=\"word.onChange($event)\"></textarea>\n          <button *ngIf=\"word.onClose\" type=\"button\" (click)=\"word.onClose()\" class=\"ml-2 close\" aria-label=\"Close\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n      </ng-template>\n      <ng-template ngbPanelContent>\n        <textarea name=\"meaning\" rows=\"2\" spellcheck='false'\n        [(ngModel)]=\"word.meaning\" (ngModelChange)=\"word.onChange($event)\"\n          class=\"speecher-font-ms border-0 form-control bg-dark\"></textarea>\n      </ng-template>\n    </ngb-panel>\n    <ngb-panel id='examples' *ngIf=\"word.example.length !== 0\">\n      <ng-template ngbPanelTitle>\n        <strong class=\"m-0\">Example</strong>\n      </ng-template>\n      <ng-template ngbPanelContent>\n        <ng-template ngFor let-example [ngForOf]=\"word.example\" let-i=\"index\" [ngForTrackBy]=\"identify\">\n          <textarea [(ngModel)]=\"word.example[i]\" (ngModelChange)=\"word.onChange($event)\" rows=\"1\" spellcheck='false'\n            class=\"speecher-font-ms border-0 form-control bg-dark\"></textarea>\n          <hr />\n        </ng-template>\n      </ng-template>\n    </ngb-panel>\n  </ngb-accordion>\n</ng-template>\n","import {\n  Injectable,\n  ComponentFactoryResolver,\n  ComponentFactory,\n  Type,\n  TemplateRef,\n  ComponentRef,\n  AfterViewInit,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class TemplateService {\n  constructor(\n    private resolver: ComponentFactoryResolver,\n  ) {}\n  public getTemplateContent<T>(\n    viewContainer: ViewContainerRef,\n    component: Type<any>,\n  ): Promise<TemplateRef<any>> {\n    return new Promise((resolve, reject) => {\n      const factory: ComponentFactory<any> = this.resolver.resolveComponentFactory(\n        component\n      );\n      const ref: ComponentRef<any> = viewContainer.createComponent(factory);\n      const instance = ref.instance as TemplateWrapperBase;\n      instance.getTemplateRef().subscribe(\n        (template: TemplateRef<any>) => {\n          if (template !== null) {\n            resolve(template);\n          } else {\n            reject('template does not exist in this component: ' + component);\n          }\n          ref.destroy();\n        },\n        (error) => {\n          reject(error);\n          ref.destroy();\n        }\n      );\n    });\n  }\n}\n\nexport class TemplateWrapperBase implements AfterViewInit {\n  @ViewChild(TemplateRef) private content: TemplateRef<any>;\n  private template: Subject<TemplateRef<any>> = new Subject();\n\n  getTemplateRef(): Observable<TemplateRef<any>> {\n    return this.template.asObservable();\n  }\n\n  ngAfterViewInit(): any {\n    if (this.content) {\n      this.template.next(this.content);\n      this.template.complete();\n    }\n  }\n}\n"]}