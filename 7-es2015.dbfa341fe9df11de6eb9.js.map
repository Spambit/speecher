{"version":3,"sources":["webpack:///src/app/services/toast.service.ts","webpack:///src/app/modules/home/home.component.html","webpack:///src/app/modules/home/home.component.ts","webpack:///src/app/modules/home/home.module.ts"],"names":["ToastService","toasts","textOrTpl","options","this","push","show","successTpl","duration","classname","header","delay","dangerTpl","toast","filter","t","pop","HomeComponent","router","driveService","toastService","loginService","cd","shouldShowAddToHomeBtn","isLoggedIn","user","login$","subscribe","next","loggedIn","loginSuccess","loggedOut","error","err","loginFail","navigate","write","read","login","logout","getUserInfo","detectChanges","path","component","pathMatch","SpeecherHomeModule","forChild"],"mappings":"+IAGO,Y,MAAMA,EADb,cAEE,KAAAC,OAAgB,GAEhB,KAAKC,EAAsCC,EAAwB,IACjEC,KAAKH,OAAOI,KAAK,OAAD,QAAGH,aAAcC,IAEnC,eACEC,KAAKE,KAAK,yBAGZ,YAAYC,EAAwC,GAAIC,EAAmB,KACzEJ,KAAKE,KAAKC,EAAY,CACpBE,UAAW,wBACXC,OAAQ,UACRC,MAAOH,IAIX,WAAWI,EAAoB,GAAIJ,EAAmB,KACpDJ,KAAKE,KAAKM,EAAW,CAAEH,UAAW,uBAAwBE,MAAOH,IAGnE,OAAOK,GACLT,KAAKH,OAASG,KAAKH,OAAOa,OAAOC,GAAKA,IAAMF,GAE9C,aACET,KAAKH,OAAOe,O,6CA1BHhB,I,yBAAAA,EAAY,QAAZA,EAAY,qBADC,S,GACnB,I,4MCAD,iB,oBAA6D,gC,sBAC7D,gBAAsD,kBAAO,iBAAQ,oBAAS,OAAS,Q,yBACvF,gBACE,gBAA6C,QAAa,OAC1D,gBAA4B,QAAc,OAC5C,Q,oBAF+C,0BACjB,4B,sBAOhC,YAAuB,uJACwD,iBAAQ,+BAAoB,OAAS,aACpH,Q,uCAEE,oBAA2D,0DAAgC,gBAAK,Q,uCAChG,oBAA0D,2DAAiC,iBAAM,QCPhG,Y,MAAMiB,EACX,YACUC,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,SACA,KAAAC,eACA,KAAAC,eACA,KAAAC,eACA,KAAAC,KAGV,KAAAC,wBAAyB,EACzB,KAAAC,YAAa,EACb,KAAAC,KAKI,GACJ,WACErB,KAAKiB,aAAaK,OAAOC,UAAU,CACjCC,KAAOC,IACDA,EACFzB,KAAK0B,eAEL1B,KAAK2B,aAGTC,MAAQC,IACN7B,KAAK8B,UAAUD,MAMrB,mBACE7B,KAAKc,OAAOiB,SAAS,CAAC,IAAgBC,QAGxC,eACEhC,KAAKc,OAAOiB,SAAS,CAAC,IAAgBE,OAGxC,QACEjC,KAAKe,aAAamB,QAGpB,SACElC,KAAKiB,aAAakB,SAGpB,eACEnC,KAAKoB,YAAa,EAClBpB,KAAKqB,KAAOrB,KAAKiB,aAAamB,cAC9BpC,KAAKkB,GAAGmB,gBAGV,UAAUR,GACR7B,KAAKoB,YAAa,EAClBpB,KAAKqB,KAAO,GACZrB,KAAKkB,GAAGmB,gBAGV,YACErC,KAAKoB,YAAa,EAClBpB,KAAKqB,KAAO,GACZrB,KAAKkB,GAAGmB,iB,6CAhECxB,GAAa,oD,uBAAbA,EAAa,whCDZ1B,gBACE,gBACE,gBACE,sBACA,qBACA,qBAIF,OACA,eACA,cAAgB,6KACsC,OACtD,eACA,qBAGA,eACE,0BACA,0BACF,OACF,OACA,kBACE,iBACE,iBAA6E,+BAAmB,OAChG,iBAAoF,mBAAO,OAC3F,iBAA6E,wBAAY,OACzF,iBAA6E,0BAAc,OAC3F,iBAA6E,0BAAc,OAC3F,iBAA6E,kCAAsB,OACrG,OAOF,OACF,Q,MAnCW,kCACD,mCACA,kCASH,mCAIO,mCACA,oC,+4lOCPP,G,gBCPP,MAAM,EAAS,CAAC,CACdyB,KAAO,GACPC,UAAW,EACXC,UAAW,SASN,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAkB,SANpB,CACP,IACA,IAAaC,SAAS,O,GAInB","file":"x","sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ToastService {\n  toasts: any[] = [];\n\n  show(textOrTpl: string | TemplateRef<any>, options: ToastOption  = {}) {\n    this.toasts.push({ textOrTpl, ...options });\n  }\n  showStandard() {\n    this.show('I am a standard toast');\n  }\n\n  showSuccess(successTpl: string | TemplateRef<any> = '', duration: number = 3000) {\n    this.show(successTpl, {\n      classname: 'bg-success text-light',\n      header: 'Success',\n      delay: duration\n    });\n  }\n\n  showDanger(dangerTpl: string = '', duration: number = 3000) {\n    this.show(dangerTpl, { classname: 'bg-danger text-light', delay: duration});\n  }\n\n  remove(toast) {\n    this.toasts = this.toasts.filter(t => t !== toast);\n  }\n  removeLast(){\n    this.toasts.pop();\n  }\n}\n\nexport interface ToastOption {\n  context?: any;\n  classname?: string;\n  delay?: number;\n  header?: string;\n}\n","<div class=\"d-flex flex-column flex-md-row justify-content-between speecher-home\">\n  <div class=\"jumbotron\">\n    <div class=\"d-flex flex-row justify-content-start ml-0 mr-0 p-1\">\n      <img *ngIf=\"isLoggedIn\" class=\"rounded mr-2 speecher-avatar\" [src]=\"user.avatar\">\n      <h1 *ngIf=\"!isLoggedIn\" class=\"display-4 text-yellow\">Hello, <strong>Speecher!</strong></h1>\n      <ul *ngIf=\"isLoggedIn\" class=\"list-group list-group-flush speecher-user-info\">\n        <li class=\"list-group-item text-yellow pt-0\">{{user.name}}</li>\n        <li class=\"list-group-item\">{{user.email}}</li>\n      </ul>\n    </div>\n    <hr class=\"my-4\">\n    <p class=\"lead\">Read English everyday preferably in short amount. Note your english story. Pick unknown words or phrases, and\n      save them in your google drive for future reference.</p>\n    <hr class=\"my-4\">\n    <p *ngIf=\"!isLoggedIn\">You should login to google to save notes for all your devices.\n      Don't worry! We have access only to single folder in your google drive named <strong>Speecher-Data-Folder</strong>.\n    </p>\n    <p class=\"lead\">\n      <button *ngIf=\"!isLoggedIn\" class=\"btn btn-success btn-lg\" (click)=\"login()\" role=\"button\">Login</button>\n      <button *ngIf=\"isLoggedIn\" class=\"btn btn-success btn-lg\" (click)=\"logout()\" role=\"button\">Logout</button>\n    </p>\n  </div>\n  <div class=\"d-flex flex-column justify-content-center speecher-menu\">\n    <ul class=\"list-group list-group-flush\">\n      <li class=\"list-group-item list-group-item-action text-darkgray text-center\">Create Today's Note</li>\n      <li class=\"list-group-item list-group-item-action text-darkgray text-center active\">My Days</li>\n      <li class=\"list-group-item list-group-item-action text-darkgray text-center\">All My Words</li>\n      <li class=\"list-group-item list-group-item-action text-darkgray text-center\">All My Phrases</li>\n      <li class=\"list-group-item list-group-item-action text-darkgray text-center\">Pick 5 Randoms</li>\n      <li class=\"list-group-item list-group-item-action text-darkgray text-center\">A Random Sweet Old Day</li>\n    </ul>\n    <!-- <button type=\"button\" (click)=\"createTodaysNote()\" class=\"btn btn-success menu-item\">Create Today's Note</button>\n    <button type=\"button\" (click)=\"showAllNotes()\" class=\"btn btn-success menu-item\">My Days</button> -->\n    <!-- <button type=\"button\" class=\"btn btn-success menu-item\">All My Words</button>\n    <button type=\"button\" class=\"btn btn-success menu-item\">All My Phrases</button>\n    <button type=\"button\" class=\"btn btn-success menu-item\">Pick 5 Randoms</button>\n    <button type=\"button\" class=\"btn btn-success menu-item\">A Random Sweet Old Day</button> -->\n  </div>\n</div>\n","import { Component, OnInit, HostListener, ChangeDetectorRef, AfterViewInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport * as AppRoutes from '../../routes';\nimport { LoginService } from '@services/login.service';\nimport { DriveService } from '@services/drive.service';\nimport { ToastService } from '@services/toast.service';\n\n@Component({\n  selector: 'speecher-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  constructor(\n    private router: Router,\n    private driveService: DriveService,\n    private toastService: ToastService,\n    private loginService: LoginService,\n    private cd: ChangeDetectorRef\n  ) {}\n  deferredPrompt: any;\n  shouldShowAddToHomeBtn = false;\n  isLoggedIn = false;\n  user: {\n    avatar?: string;\n    name?: string;\n    email?: string;\n    shortName?: string;\n  } = {};\n  ngOnInit() {\n    this.loginService.login$.subscribe({\n      next: (loggedIn) => {\n        if (loggedIn) {\n          this.loginSuccess();\n        }else {\n          this.loggedOut();\n        }\n      },\n      error: (err) => {\n        this.loginFail(err);\n      },\n    });\n    // setInterval(() => { this.isLoggedIn = !this.isLoggedIn; }, 5000);\n  }\n\n  createTodaysNote() {\n    this.router.navigate([AppRoutes.names.write]);\n  }\n\n  showAllNotes() {\n    this.router.navigate([AppRoutes.names.read]);\n  }\n\n  login() {\n    this.driveService.login();\n  }\n\n  logout() {\n    this.loginService.logout();\n  }\n\n  loginSuccess() {\n    this.isLoggedIn = true;\n    this.user = this.loginService.getUserInfo();\n    this.cd.detectChanges();\n  }\n\n  loginFail(err: any) {\n    this.isLoggedIn = false;\n    this.user = {};\n    this.cd.detectChanges();\n  }\n\n  loggedOut() {\n    this.isLoggedIn = false;\n    this.user = {};\n    this.cd.detectChanges();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nconst routes = [{\n  path : '',\n  component: HomeComponent,\n  pathMatch: 'full',\n}];\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [HomeComponent]\n})\nexport class SpeecherHomeModule { }\n"]}