{"version":3,"sources":["webpack:///src/app/modules/home/home.component.html","webpack:///src/app/modules/home/home.component.ts","webpack:///src/app/modules/home/home.module.ts"],"names":["HomeComponent","SpeecherHomeModule","router","driveService","loginService","cd","shouldShowAddToHomeBtn","isLoggedIn","user","navConfig","button","dropdown","dropdownTitle","dropdownItems","text","click","e","item","this","createTodaysNote","showAllNotes","login$","subscribe","next","loggedIn","loginSuccess","loggedOut","error","err","loginFail","navigate","write","read","login","logout","getUserInfo","setTimeout","detectChanges","path","component","pathMatch","forChild"],"mappings":"2oBAIM,iB,kBAA6D,gC,sBAC7D,gBAAsD,kBAAO,iBAAQ,oBAAS,OAAS,Q,yBACvF,gBACE,gBAA4D,eAAyB,QAAa,OAAI,OACtG,gBAA4B,eAA4B,QAAc,OAAI,OAC5E,Q,kBAFuF,0BAC7B,4B,sBAO5D,YAAuB,uJACwD,iBAAQ,+BAAoB,OAAS,aACpH,Q,qCAGE,oBAA2D,0DAAgC,gBAAK,Q,qCAChG,oBAA0D,2DAAiC,iBAAM,Q,qCAKjG,gBAEM,2DAAS,gBAA0C,QACzD,O,0BADyD,6BCPxD,IAAMA,ECJAC,EDIN,IAAMD,EAAN,WACL,WACUE,EACAC,EACAC,EACAC,sCAHA,KAAAH,SACA,KAAAC,eACA,KAAAC,eACA,KAAAC,KAGV,KAAAC,0BACA,KAAAC,cACA,KAAAC,KAKI,GACJ,KAAAC,UAAuB,CACrBC,OAAQ,CACNC,UAASA,EACTC,cAAe,YACfC,cAAe,CACb,CACEC,KAAM,sBACNC,MAAO,SAACC,EAAGC,GAAJ,OAAaC,EAAKC,qBAE3B,CACEL,KAAM,UACNC,MAAO,SAACC,EAAGC,GAAJ,OAAaC,EAAKE,iBAE3B,CACEN,KAAM,eACNC,MAAO,SAACC,EAAGC,MAEb,CACEH,KAAM,iBACNC,MAAO,SAACC,EAAGC,MAEb,CACEH,KAAM,iBACNC,MAAO,SAACC,EAAGC,MAEb,CACEH,KAAM,yBACNC,MAAO,SAACC,EAAGC,SA3Cd,wDAgDK,WACRC,KAAKd,aAAaiB,OAAOC,UAAU,CACjCC,KAAOC,YACDA,EACFN,EAAKO,eAELP,EAAKQ,aAGTC,MAAQC,YACNV,EAAKW,UAAUD,QA1DhB,yCAgEHV,KAAKhB,OAAO4B,SAAS,CAAC,IAAgBC,UAhEnC,qCAoEHb,KAAKhB,OAAO4B,SAAS,CAAC,IAAgBE,SApEnC,8BAwEHd,KAAKf,aAAa8B,UAxEf,+BA4EHf,KAAKd,aAAa8B,WA5Ef,qCA+ES,WACZhB,KAAKX,cACLW,KAAKV,KAAOU,KAAKd,aAAa+B,cAC9BC,YAAW,kBAAMlB,EAAKb,GAAGgC,kBAAiB,OAlFvC,gCAqFKT,GACRV,KAAKX,cACLW,KAAKV,KAAO,KAvFT,kCA0FM,WACTU,KAAKX,cACLW,KAAKV,KAAO,GACZ4B,YAAW,kBAAMlB,EAAKb,GAAGgC,kBAAiB,SA7FvC,M,oCAAMrC,GAAa,0C,uBAAbA,EAAa,0rCDrB1B,yBACA,gBACE,gBACE,gBACE,sBACA,qBACA,qBAIF,OACA,eACA,cAAgB,6KACsC,OACtD,gBACA,qBAGA,gBACA,eACE,2BACA,2BACF,OACF,OACA,kBACE,iBACE,uBAIF,OACF,OACF,Q,MAhC2C,2BAIhC,kCACD,mCACA,kCASH,mCAKO,mCACA,kCAKJ,2D,8tmOErBJ,EAAS,CAAC,CACdsC,KAAO,GACPC,UAAW,EACXC,UAAW,SASN,IAAMvC,EAAN,uC,qBAAMA,I,oDAAAA,IAAkB,SANpB,CACP,IACA,IAAawC,SAAS,O","file":"x","sourcesContent":["<speecher-nav class='d-sm-block d-md-none' [config]='navConfig'></speecher-nav>\n<div class=\"d-flex flex-column flex-md-row justify-content-between speecher-home\">\n  <div class=\"jumbotron\">\n    <div class=\"speecher-welcome d-flex flex-row justify-content-start ml-0 mr-0 p-1\">\n      <img *ngIf=\"isLoggedIn\" class=\"rounded mr-2 speecher-avatar\" [src]=\"user.avatar\">\n      <h1 *ngIf=\"!isLoggedIn\" class=\"display-4 text-yellow\">Hello, <strong>Speecher!</strong></h1>\n      <ul *ngIf=\"isLoggedIn\" class=\"list-group list-group-flush speecher-user-info\">\n        <li class=\"d-inline-block list-group-item text-yellow pt-0\"><a class='sm-small-font'>{{user.name}}</a></li>\n        <li class=\"list-group-item\"><a class='sm-xx-small-font'>{{user.email}}</a></li>\n      </ul>\n    </div>\n    <hr class=\"my-4\">\n    <p class=\"lead\">Read English everyday preferably in short amount. Note your english story. Pick unknown words or phrases, and\n      save them in your google drive for future reference.</p>\n    <hr class=\"my-4\">\n    <p *ngIf=\"!isLoggedIn\">You should login to google to save notes for all your devices.\n      Don't worry! We have access only to single folder in your google drive named <strong>Speecher-Data-Folder</strong>.\n    </p>\n    <hr class=\"my-4\">\n    <p class=\"lead\">\n      <button *ngIf=\"!isLoggedIn\" class=\"btn btn-success btn-lg\" (click)=\"login()\" role=\"button\">Login</button>\n      <button *ngIf=\"isLoggedIn\" class=\"btn btn-success btn-lg\" (click)=\"logout()\" role=\"button\">Logout</button>\n    </p>\n  </div>\n  <div class=\"d-none d-md-flex flex-column justify-content-center speecher-menu\">\n    <ul class=\"list-group list-group-flush\">\n      <li *ngFor=\"let dropdownItem of navConfig.button.dropdownItems\"\n            class=\"list-group-item list-group-item-action text-darkgray text-center\"\n            (click)=\"dropdownItem.click($event, dropdownItem)\">{{dropdownItem.text}}\n      </li>\n    </ul>\n  </div>\n</div>\n","import {\n  Component,\n  OnInit,\n  ChangeDetectorRef,\n  OnChanges,\n  NgZone,\n} from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport * as AppRoutes from '../../routes';\nimport { LoginService } from '@services/login.service';\nimport { DriveService } from '@services/drive.service';\nimport { ToastService } from '@services/toast.service';\nimport {\n  NavConfig,\n} from '@components/speecher-nav/speecher-nav.component';\n\n@Component({\n  selector: 'speecher-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  constructor(\n    private router: Router,\n    private driveService: DriveService,\n    private loginService: LoginService,\n    private cd: ChangeDetectorRef\n  ) {}\n  deferredPrompt: any;\n  shouldShowAddToHomeBtn = false;\n  isLoggedIn = false;\n  user: {\n    avatar?: string;\n    name?: string;\n    email?: string;\n    shortName?: string;\n  } = {};\n  navConfig: NavConfig = {\n    button: {\n      dropdown: true,\n      dropdownTitle: 'Start Now',\n      dropdownItems: [\n        {\n          text: `Create Today's Note`,\n          click: (e, item) => this.createTodaysNote(),\n        },\n        {\n          text: `My Days`,\n          click: (e, item) => this.showAllNotes(),\n        },\n        {\n          text: `All My Words`,\n          click: (e, item) => {},\n        },\n        {\n          text: `All My Phrases`,\n          click: (e, item) => {},\n        },\n        {\n          text: `Pick 5 Randoms`,\n          click: (e, item) => {},\n        },\n        {\n          text: `A Random Sweet Old Day`,\n          click: (e, item) => {},\n        }\n      ],\n    },\n  };\n  ngOnInit() {\n    this.loginService.login$.subscribe({\n      next: (loggedIn) => {\n        if (loggedIn) {\n          this.loginSuccess();\n        } else {\n          this.loggedOut();\n        }\n      },\n      error: (err) => {\n        this.loginFail(err);\n      },\n    });\n  }\n\n  private createTodaysNote() {\n    this.router.navigate([AppRoutes.names.write]);\n  }\n\n  private showAllNotes() {\n    this.router.navigate([AppRoutes.names.read]);\n  }\n\n  login() {\n    this.driveService.login();\n  }\n\n  logout() {\n    this.loginService.logout();\n  }\n\n  loginSuccess() {\n    this.isLoggedIn = true;\n    this.user = this.loginService.getUserInfo();\n    setTimeout(() => this.cd.detectChanges(), 500);\n  }\n\n  loginFail(err: any) {\n    this.isLoggedIn = false;\n    this.user = {};\n  }\n\n  loggedOut() {\n    this.isLoggedIn = false;\n    this.user = {};\n    setTimeout(() => this.cd.detectChanges(), 500);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nconst routes = [{\n  path : '',\n  component: HomeComponent,\n  pathMatch: 'full',\n}];\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [HomeComponent]\n})\nexport class SpeecherHomeModule { }\n"]}