{"version":3,"sources":["webpack:///src/app/modules/home/home.component.html","webpack:///src/app/modules/home/home.component.ts","webpack:///src/app/modules/home/home.module.ts"],"names":["HomeComponent","router","driveService","toastService","loginService","cd","shouldShowAddToHomeBtn","isLoggedIn","user","navConfig","button","dropdown","dropdownTitle","dropdownItems","text","click","e","item","this","createTodaysNote","showAllNotes","login$","subscribe","next","loggedIn","loginSuccess","loggedOut","error","err","loginFail","navigate","write","read","login","logout","getUserInfo","detectChanges","path","component","pathMatch","SpeecherHomeModule","forChild"],"mappings":"iRAIM,iB,oBAA6D,gC,sBAC7D,gBAAsD,kBAAO,iBAAQ,oBAAS,OAAS,Q,yBACvF,gBACE,gBAA6C,QAAa,OAC1D,gBAA4B,QAAc,OAC5C,Q,oBAF+C,0BACjB,4B,sBAOhC,YAAuB,uJACwD,iBAAQ,+BAAoB,OAAS,aACpH,Q,uCAEE,oBAA2D,0DAAgC,gBAAK,Q,uCAChG,oBAA0D,2DAAiC,iBAAM,Q,uCAKjG,gBAEM,6DAAS,gBAA0C,QACzD,O,4BADyD,6BCbxD,Y,MAAMA,EACX,YACUC,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,SACA,KAAAC,eACA,KAAAC,eACA,KAAAC,eACA,KAAAC,KAGV,KAAAC,wBAAyB,EACzB,KAAAC,YAAa,EACb,KAAAC,KAKI,GACJ,KAAAC,UAAuB,CACrBC,OAAQ,CACNC,UAAU,EACVC,cAAe,YACfC,cAAe,CACb,CACEC,KAAM,sBACNC,MAAO,CAACC,EAAGC,IAASC,KAAKC,oBAE3B,CACEL,KAAM,UACNC,MAAO,CAACC,EAAGC,IAASC,KAAKE,gBAE3B,CACEN,KAAM,eACNC,MAAO,CAACC,EAAGC,QAEb,CACEH,KAAM,iBACNC,MAAO,CAACC,EAAGC,QAEb,CACEH,KAAM,iBACNC,MAAO,CAACC,EAAGC,QAEb,CACEH,KAAM,yBACNC,MAAO,CAACC,EAAGC,WAKnB,WACEC,KAAKd,aAAaiB,OAAOC,UAAU,CACjCC,KAAOC,IACDA,EACFN,KAAKO,eAELP,KAAKQ,aAGTC,MAAQC,IACNV,KAAKW,UAAUD,MAKrB,mBACEV,KAAKjB,OAAO6B,SAAS,CAAC,IAAgBC,QAGxC,eACEb,KAAKjB,OAAO6B,SAAS,CAAC,IAAgBE,OAGxC,QACEd,KAAKhB,aAAa+B,QAGpB,SACEf,KAAKd,aAAa8B,SAGpB,eACEhB,KAAKX,YAAa,EAClBW,KAAKV,KAAOU,KAAKd,aAAa+B,cAC9BjB,KAAKb,GAAG+B,gBAGV,UAAUR,GACRV,KAAKX,YAAa,EAClBW,KAAKV,KAAO,GACZU,KAAKb,GAAG+B,gBAGV,YACElB,KAAKX,YAAa,EAClBW,KAAKV,KAAO,GACZU,KAAKb,GAAG+B,iB,6CA/FCpC,GAAa,oD,uBAAbA,EAAa,2mCDd1B,yBACA,gBACE,gBACE,gBACE,sBACA,qBACA,qBAIF,OACA,eACA,cAAgB,6KACsC,OACtD,gBACA,qBAGA,eACE,2BACA,2BACF,OACF,OACA,kBACE,iBACE,uBAIF,OACF,OACF,Q,MA/B2C,2BAIhC,kCACD,mCACA,kCASH,mCAIO,mCACA,kCAKJ,2D,u5lOCXH,G,gBCTP,MAAM,EAAS,CAAC,CACdqC,KAAO,GACPC,UAAW,EACXC,UAAW,SASN,Y,MAAMC,G,8BAAAA,I,oDAAAA,IAAkB,SANpB,CACP,IACA,IAAaC,SAAS,O,GAInB","file":"x","sourcesContent":["<speecher-nav class='d-sm-block d-md-none' [config]='navConfig'></speecher-nav>\n<div class=\"d-flex flex-column flex-md-row justify-content-between speecher-home\">\n  <div class=\"jumbotron\">\n    <div class=\"d-flex flex-row justify-content-start ml-0 mr-0 p-1\">\n      <img *ngIf=\"isLoggedIn\" class=\"rounded mr-2 speecher-avatar\" [src]=\"user.avatar\">\n      <h1 *ngIf=\"!isLoggedIn\" class=\"display-4 text-yellow\">Hello, <strong>Speecher!</strong></h1>\n      <ul *ngIf=\"isLoggedIn\" class=\"list-group list-group-flush speecher-user-info\">\n        <li class=\"list-group-item text-yellow pt-0\">{{user.name}}</li>\n        <li class=\"list-group-item\">{{user.email}}</li>\n      </ul>\n    </div>\n    <hr class=\"my-4\">\n    <p class=\"lead\">Read English everyday preferably in short amount. Note your english story. Pick unknown words or phrases, and\n      save them in your google drive for future reference.</p>\n    <hr class=\"my-4\">\n    <p *ngIf=\"!isLoggedIn\">You should login to google to save notes for all your devices.\n      Don't worry! We have access only to single folder in your google drive named <strong>Speecher-Data-Folder</strong>.\n    </p>\n    <p class=\"lead\">\n      <button *ngIf=\"!isLoggedIn\" class=\"btn btn-success btn-lg\" (click)=\"login()\" role=\"button\">Login</button>\n      <button *ngIf=\"isLoggedIn\" class=\"btn btn-success btn-lg\" (click)=\"logout()\" role=\"button\">Logout</button>\n    </p>\n  </div>\n  <div class=\"d-none d-md-flex flex-column justify-content-center speecher-menu\">\n    <ul class=\"list-group list-group-flush\">\n      <li *ngFor=\"let dropdownItem of navConfig.button.dropdownItems\"\n            class=\"list-group-item list-group-item-action text-darkgray text-center\"\n            (click)=\"dropdownItem.click($event, dropdownItem)\">{{dropdownItem.text}}\n      </li>\n    </ul>\n  </div>\n</div>\n","import { Component, OnInit, HostListener, ChangeDetectorRef, AfterViewInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport * as AppRoutes from '../../routes';\nimport { LoginService } from '@services/login.service';\nimport { DriveService } from '@services/drive.service';\nimport { ToastService } from '@services/toast.service';\nimport { NavConfig, NavDropDownItem } from '@components/speecher-nav/speecher-nav.component';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'speecher-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  constructor(\n    private router: Router,\n    private driveService: DriveService,\n    private toastService: ToastService,\n    private loginService: LoginService,\n    private cd: ChangeDetectorRef\n  ) {}\n  deferredPrompt: any;\n  shouldShowAddToHomeBtn = false;\n  isLoggedIn = false;\n  user: {\n    avatar?: string;\n    name?: string;\n    email?: string;\n    shortName?: string;\n  } = {};\n  navConfig: NavConfig = {\n    button: {\n      dropdown: true,\n      dropdownTitle: 'Start Now',\n      dropdownItems: [\n        {\n          text: `Create Today's Note`,\n          click: (e, item) => this.createTodaysNote(),\n        },\n        {\n          text: `My Days`,\n          click: (e, item) => this.showAllNotes(),\n        },\n        {\n          text: `All My Words`,\n          click: (e, item) => {},\n        },\n        {\n          text: `All My Phrases`,\n          click: (e, item) => {},\n        },\n        {\n          text: `Pick 5 Randoms`,\n          click: (e, item) => {},\n        },\n        {\n          text: `A Random Sweet Old Day`,\n          click: (e, item) => {},\n        }\n      ]\n    },\n  };\n  ngOnInit() {\n    this.loginService.login$.subscribe({\n      next: (loggedIn) => {\n        if (loggedIn) {\n          this.loginSuccess();\n        }else {\n          this.loggedOut();\n        }\n      },\n      error: (err) => {\n        this.loginFail(err);\n      },\n    });\n  }\n\n  createTodaysNote() {\n    this.router.navigate([AppRoutes.names.write]);\n  }\n\n  showAllNotes() {\n    this.router.navigate([AppRoutes.names.read]);\n  }\n\n  login() {\n    this.driveService.login();\n  }\n\n  logout() {\n    this.loginService.logout();\n  }\n\n  loginSuccess() {\n    this.isLoggedIn = true;\n    this.user = this.loginService.getUserInfo();\n    this.cd.detectChanges();\n  }\n\n  loginFail(err: any) {\n    this.isLoggedIn = false;\n    this.user = {};\n    this.cd.detectChanges();\n  }\n\n  loggedOut() {\n    this.isLoggedIn = false;\n    this.user = {};\n    this.cd.detectChanges();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HomeComponent } from './home.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { RouterModule } from '@angular/router';\nconst routes = [{\n  path : '',\n  component: HomeComponent,\n  pathMatch: 'full',\n}];\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes),\n  ],\n  declarations: [HomeComponent]\n})\nexport class SpeecherHomeModule { }\n"]}