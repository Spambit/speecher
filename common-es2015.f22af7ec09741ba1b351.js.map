{"version":3,"sources":["webpack:///src/app/services/login.service.ts","webpack:///src/app/utils/object.util.ts","webpack:///src/app/utils/index.ts","webpack:///src/app/services/drive.service.ts","webpack:///src/app/conf/conf.drive.keys.ts"],"names":["LoginService","login$","this","loadGoogleApi","scope","apiKey","clientId","discoveryDocs","gapi","client","init","then","googleAuth","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","e","Promise","reject","isLoggedIn","console","log","next","script","document","createElement","addEventListener","googleApiDidLoad","setAttribute","body","appendChild","forScope","currentUser","get","hasGrantedScopes","user","getBasicProfile","avatar","getImageUrl","name","getName","email","getEmail","shortName","getFamilyName","load","msg","error","key","initClient","_","builder","SigninOptionsBuilder","setPrompt","setScope","signIn","catch","throwDeferedError","signOut","createInstanceOfClass","c","attrValues","obj","keys","Object","defer","fn","window","setTimeout","DriveService","loginService","loginOptions","loadGoogleDrive","createFolderInternal","id","drive","files","list","q","fields","spaces","res","status","resolve","loadApi","login","pipe","first","subscribe","loggedIn","fileMetadata","mimeType","folderColorRgb","create","resource","response","file","result","logout","withContent","folderId","createFileWithJSONContent","data","JSON","stringify","delimiter","multipartRequestBody","parents","request","path","method","params","uploadType","headers","execute"],"mappings":"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","file":"x","sourcesContent":["import * as Utils from '../utils';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject, of } from 'rxjs';\n\ndeclare var gapi: any;\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  readonly login$: Subject<boolean> = new Subject();\n  private googleAuth: any;\n  constructor() {\n    this.loadGoogleApi();\n  }\n\n  private initClient({\n    scope = '',\n    apiKey = '',\n    clientId = '',\n    discoveryDocs = ([] = ['']),\n  }): Promise<any> {\n    if (!gapi) {\n      return Promise.reject('Google Api not available.');\n    }\n\n    return gapi.client\n      .init({\n        apiKey,\n        clientId,\n        scope,\n        discoveryDocs,\n      })\n      .then(\n        () => {\n          this.googleAuth = gapi.auth2.getAuthInstance();\n          // Listen for sign-in state changes.\n          this.googleAuth.isSignedIn.listen((isSignedIn) =>\n            this.updateSigninStatus(isSignedIn)\n          );\n        },\n        (e) => Promise.reject(e)\n      );\n  }\n\n  private updateSigninStatus(isLoggedIn: boolean) {\n    console.log(`Logged in : ${isLoggedIn}`);\n    this.login$.next(isLoggedIn);\n  }\n\n  private loadGoogleApi() {\n    const gapiUrl = 'https://apis.google.com/js/api.js';\n    const script = document.createElement('script');\n    script.addEventListener('load', () => this.googleApiDidLoad());\n    script.setAttribute('src', gapiUrl);\n    document.body.appendChild(script);\n  }\n\n  isLoggedIn({ forScope = '' }): boolean {\n    if (!this.googleAuth) {\n      return false;\n    }\n    const user = this.googleAuth.currentUser.get();\n    return user.hasGrantedScopes(forScope);\n  }\n\n  getUserInfo(): { avatar: string, name: string, email: string, shortName: string } {\n    if (!this.googleAuth || !this.googleAuth.currentUser) {\n      return;\n    }\n    const user = this.googleAuth.currentUser.get().getBasicProfile();\n    return {\n      avatar: user.getImageUrl(),\n      name: user.getName(),\n      email: user.getEmail(),\n      shortName: user.getFamilyName()\n    };\n  }\n\n  private googleApiDidLoad() {\n    gapi.load('client:auth2', () => {\n      console.log('Google auth loaded.');\n    });\n  }\n\n  private throwDeferedError(msg: string): void {\n    Utils.defer(() => {\n      this.login$.error(msg);\n    });\n  }\n\n  public login({\n    scope = '',\n    key = '',\n    clientId = '',\n    discoveryDocs = ([] = ['']),\n  }): Observable<boolean> {\n    this.initClient({ scope, apiKey: key, clientId, discoveryDocs })\n      .then((_) => {\n        if (this.googleAuth.isSignedIn.get()) {\n          this.login$.next(true);\n        } else {\n          const builder = new gapi.auth2.SigninOptionsBuilder();\n          builder.setPrompt('select_account');\n          builder.setScope('profile').setScope('email');\n          this.googleAuth.signIn(builder).catch((e) => {\n            this.throwDeferedError(e);\n          });\n        }\n      })\n      .catch((e) => {\n        this.login$.error(e);\n      });\n    return this.login$;\n  }\n  public logout(): Observable<boolean> {\n    if (!this.googleAuth) {\n      this.throwDeferedError('Google Auth was not loaded.');\n    } else if (!this.googleAuth.isSignedIn.get()) {\n      Utils.defer(() => this.login$.next(false));\n    } else {\n      this.googleAuth.signOut().catch((e) => {\n        this.throwDeferedError('logout failed');\n      });\n    }\n    return this.login$;\n  }\n}\n","export function createInstanceOfClass<T>(c: new () => T, attrValues: any): T {\n  const obj = new c();\n  const keys = Object.keys(attrValues);\n  for (const key of keys) {\n    obj[key] = attrValues[key];\n  }\n  return obj;\n}\n\nexport function clone<T>(obj: T): T {\n  const cloneObj = new (this.constructor() as any)();\n  for (const attr in obj) {\n    if (typeof obj[attr] === 'object') {\n      cloneObj[attr] = clone(obj[attr]);\n    } else {\n      cloneObj[attr] = obj[attr];\n    }\n  }\n  return cloneObj;\n}\n\nexport function setProperty<T, K extends keyof T>(obj: T, key: K, val: any) {\n  return (obj[key] = val);\n}\n\nexport function getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n\nexport function create<T>(c: new () => T): T {\n  return new c();\n}\n","export * from './object.util';\n\nexport type anyfn = (...args: any[]) => any;\nexport const defer = (fn: anyfn) => {\n  window.setTimeout(fn, 0);\n};\n","import { Injectable } from '@angular/core';\nimport { LoginService } from './login.service';\nimport { first } from 'rxjs/operators';\nimport { environment } from '../environments/env';\nimport { Observable } from 'rxjs';\nimport { rejects } from 'assert';\n\ndeclare var gapi: any;\n\n@Injectable({ providedIn: 'root' })\nexport class DriveService {\n  private loginOptions = {\n    key: environment.drive_api_key,\n    clientId: environment.drive_client_id,\n    scope: 'https://www.googleapis.com/auth/drive.appdata',\n    discoveryDocs: [\n      'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest',\n    ],\n  };\n  constructor(private loginService: LoginService) {}\n  createBaseFolder(name?: string): Promise<{ id?: string }> {\n    return this.loadGoogleDrive().then(() =>\n      this.createFolderInternal({ name })\n    );\n  }\n\n  isLoggedIn() {\n    return this.loginService.isLoggedIn({ forScope: this.loginOptions.scope });\n  }\n\n  findFile({ id }: { id: string }): Promise<boolean> {\n    return this.loadGoogleDrive().then(() => {\n      return gapi.client.drive.files\n        .list({\n          // tslint:disable-next-line: quotemark\n          q: `'${id}' in parents`,\n          fields: 'nextPageToken, files(id, name)',\n          spaces: 'drive'\n        })\n        .then((res) => (res.status === 200 ? true : false))\n        .catch(() => false);\n    });\n  }\n\n  login(): Promise<void>{\n    return this.loadGoogleDrive();\n  }\n\n  private loadGoogleDrive(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (\n        !this.loginService.isLoggedIn({ forScope: this.loginOptions.scope })\n      ) {\n        this.loginService\n          .login(this.loginOptions)\n          .pipe(first())\n          .subscribe((loggedIn) => {\n            if (loggedIn) {\n              this.loadApi().then(resolve).catch(reject);\n            } else {\n              reject();\n            }\n          });\n        return;\n      }\n      this.loadApi().then(resolve).catch(reject);\n    });\n  }\n\n  private loadApi(): Promise<void> {\n    if (gapi && gapi.client.drive) {\n      return Promise.resolve();\n    }\n    return gapi.client.load('drive', 'v3');\n  }\n\n  private createFolderInternal({\n    name = 'Speecher-Data-Folder',\n  }): Promise<{ id?: string }> {\n    const fileMetadata = {\n      name,\n      mimeType: 'application/vnd.google-apps.folder',\n      folderColorRgb: '#007bff',\n    };\n    console.log('Logged in and trying to create folder in drive.');\n    return new Promise((resolve, reject) => {\n      const options = {\n        resource: fileMetadata,\n        fields: 'id',\n      };\n      gapi.client.drive.files.create(options).then((response) => {\n        switch (response.status) {\n          case 200:\n            const file = response.result;\n            console.log('Created file or folder Id: ', file.id);\n            resolve({ id: file.id });\n            break;\n          default:\n            console.log('Error creating the file or folder, ' + response);\n            reject(response);\n            break;\n        }\n      });\n    });\n  }\n\n  logout(): Observable<boolean> {\n    return this.loginService.logout();\n  }\n\n  createFile({ name, withContent, folderId }: {name: string, withContent: any, folderId: string}): Promise<void> {\n    return this.createFileWithJSONContent({name, data : JSON.stringify(withContent), folderId});\n  }\n\n  private createFileWithJSONContent({ name, data, folderId }: {name: string, data: string, folderId: string}): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const boundary = '-------speecher-boundary';\n      const delimiter = '\\r\\n--' + boundary + '\\r\\n';\n      const closeDelim = '\\r\\n--' + boundary + '--';\n\n      const contentType = 'application/json';\n\n      const metadata = {\n        name,\n        mimeType: contentType,\n        parents: [folderId]\n      };\n\n      const multipartRequestBody =\n        delimiter +\n        'Content-Type: application/json\\r\\n\\r\\n' +\n        JSON.stringify(metadata) +\n        delimiter +\n        'Content-Type: ' +\n        contentType +\n        '\\r\\n\\r\\n' +\n        data +\n        closeDelim;\n\n      const request = gapi.client.request({\n        path: '/upload/drive/v3/files',\n        method: 'POST',\n        params: { uploadType: 'multipart' },\n        headers: {\n          'Content-Type': 'multipart/related; boundary=\"' + boundary + '\"',\n        },\n        body: multipartRequestBody,\n      });\n      request.execute((_ , res) => {\n        if (res.status !== 200) {\n          return reject();\n        }\n        resolve();\n      });\n    });\n  }\n}\n","export const drive = {\n  key: 'AIzaSyDoqtuscz4Pp_xuR9nYO10O-PsouptHmuA',\n  clientId: '814240394039-953g9k1ovucedj8u0aghsj5ofsii5jut.apps.googleusercontent.com'\n};\n"]}